import streamlit as st
from transformers import AutoTokenizer, AutoModelForSequenceClassification
import torch
from nltk.tokenize import sent_tokenize
import plotly.express as px
import re

# Load CodeBERT tokenizer and model
tokenizer = AutoTokenizer.from_pretrained('microsoft/codebert-base')
model = AutoModelForSequenceClassification.from_pretrained('microsoft/codebert-base')

# Advanced Preprocessing

def preprocess_text(text):
    """Preprocess the input text by cleaning and normalizing it."""
    # Remove excessive whitespace and normalize line endings
    text = re.sub(r'\s+', ' ', text).strip()
    # Remove inline comments (for Python and similar languages)
    text = re.sub(r'#.*', '', text)
    # Remove block comments (multi-line)
    text = re.sub(r'(\"\"\".*?\"\"\"|\'\'\'.*?\'\'\')', '', text, flags=re.DOTALL)
    return text

def detect_ai_generated_code(text):
    encoded_input = tokenizer(text, return_tensors="pt", padding=True, truncation=True, max_length=512)
    with torch.no_grad():
        outputs = model(**encoded_input)
        probabilities = torch.nn.functional.softmax(outputs.logits, dim=-1)

    ai_generated_score = probabilities[0][1].item()
    return ai_generated_score

def analyze_suspicious_parts(text):
    """Analyze each line of the text to detect suspicious parts."""
    sentences = sent_tokenize(text)
    suspicious_scores = []

    for sentence in sentences:
        score = detect_ai_generated_code(sentence)
        suspicious_scores.append((sentence, score))

    return suspicious_scores

def plot_suspicious_parts(suspicious_scores):
    """Visualize the suspicious parts of the code."""
    sentences = [item[0] for item in suspicious_scores]
    scores = [item[1] for item in suspicious_scores]

    fig = px.bar(
        x=scores, 
        y=sentences, 
        orientation='h',
        labels={'x': 'Suspicious Score', 'y': 'Code Segment'},
        title='Suspicious Code Analysis'
    )
    st.plotly_chart(fig, use_container_width=True)

st.set_page_config(layout="wide")

st.title("CodeBERT AI Code Detector")
text_area = st.text_area("Enter code or text", "")

if text_area is not None:
    if st.button("Analyze"):
        col1, col2, col3 = st.columns([1, 1, 1])

        with col1:
            st.info("Your Input Text")
            preprocessed_text = preprocess_text(text_area)
            st.success(preprocessed_text)

        with col2:
            st.info("Detection Score")
            ai_generated_score = detect_ai_generated_code(preprocessed_text)

            st.write("AI-Generated Score:", ai_generated_score)

            if ai_generated_score > 0.5:
                st.error("Text Analysis Result: Likely AI-generated content")
            else:
                st.success("Text Analysis Result: Likely not generated by AI")

            st.warning("Disclaimer: AI plagiarism detector apps can assist in identifying potential instances of plagiarism; however, it is important to note that their results may not be entirely flawless or completely reliable. These tools employ advanced algorithms, but they can still produce false positives or false negatives. Therefore, it is recommended to use AI plagiarism detectors as a supplementary tool alongside human judgment and manual verification for accurate and comprehensive plagiarism detection.")

        with col3:
            st.info("Suspicious Code Analysis")
            suspicious_scores = analyze_suspicious_parts(preprocessed_text)
            plot_suspicious_parts(suspicious_scores)
